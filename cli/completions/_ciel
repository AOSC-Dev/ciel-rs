#compdef ciel

autoload -U is-at-least

_ciel() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-C+[Set the CIEL! working directory]:DIR:_default' \
'-q[shhhhhh!]' \
'--quiet[shhhhhh!]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ciel_commands" \
"*::: :->ciel" \
&& ret=0
    case $state in
    (ciel)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ciel-command-$line[1]:"
        case $line[1] in
            (version)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(new)
_arguments "${_arguments_options[@]}" : \
'--rootfs=[Specify the tarball or squashfs to load after initialization]: :_default' \
'--sha256=[Specify the SHA-256 checksum of OS tarball]: :_default' \
'-a+[Specify the architecture of the workspace]: :_default' \
'--arch=[Specify the architecture of the workspace]: :_default' \
'--tree=[URL to the abbs tree git repository]: :_default' \
'-m+[Maintainer information]: :_default' \
'--maintainer=[Maintainer information]: :_default' \
'--dnssec=[Enable DNSSEC]: :(true false)' \
'--local-repo=[Enable local package repository]: :(true false)' \
'--source-cache=[Enable local source caches]: :(true false)' \
'--branch-exclusive-output=[Use different OUTPUT directory for branches]: :(true false)' \
'--volatile-mount=[Enable volatile mount]: :(true false)' \
'--use-apt=[Force to use APT]: :(true false)' \
'--add-repo=[Add an extra APT repository]:repo:_default' \
'--remove-repo=[Remove an extra APT repository]:repo:_default' \
'--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'(--rootfs --sha256)--no-load-os[Don'\''t load OS automatically after initialization]' \
'(--tree)--no-load-tree[Don'\''t load abbs tree automatically after initialization]' \
'--unset-repo[Remove all extra APT repository]' \
'--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(farewell)
_arguments "${_arguments_options[@]}" : \
'-f[Force perform deletion without user confirmation]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(load-os)
_arguments "${_arguments_options[@]}" : \
'--sha256=[Specify the SHA-256 checksum of OS tarball]: :_default' \
'-a+[Specify the target architecture for fetching OS tarball]: :_default' \
'--arch=[Specify the target architecture for fetching OS tarball]: :_default' \
'-f[Force override the loaded system]' \
'--force[Force override the loaded system]' \
'-h[Print help]' \
'--help[Print help]' \
'::URL -- URL or path to the tarball or squashfs:_default' \
&& ret=0
;;
(update-os)
_arguments "${_arguments_options[@]}" : \
'--local-repo=[Enable local package repository]: :(true false)' \
'--tmpfs=[Enable tmpfs]: :(true false)' \
'--tmpfs-size=[Size of tmpfs to use, in MiB]: :_default' \
'--ro-tree=[Mount TREE as read-only]: :(true false)' \
'--add-repo=[Add an extra APT repository]:repo:_default' \
'--remove-repo=[Remove an extra APT repository]:repo:_default' \
'--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'--force-use-apt[Use apt to update-os]' \
'--unset-tmpfs-size[Reset tmpfs size to default]' \
'--unset-repo[Remove all extra APT repository]' \
'--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(instconf)
_arguments "${_arguments_options[@]}" : \
'-i+[Instance to be configured]: :_default' \
'--local-repo=[Enable local package repository]: :(true false)' \
'--tmpfs=[Enable tmpfs]: :(true false)' \
'--tmpfs-size=[Size of tmpfs to use, in MiB]: :_default' \
'--ro-tree=[Mount TREE as read-only]: :(true false)' \
'--add-repo=[Add an extra APT repository]:repo:_default' \
'--remove-repo=[Remove an extra APT repository]:repo:_default' \
'--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'--force-no-rollback[Do not rollback instances to apply configuration]' \
'--unset-tmpfs-size[Reset tmpfs size to default]' \
'--unset-repo[Remove all extra APT repository]' \
'--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
'-m+[Maintainer information]: :_default' \
'--maintainer=[Maintainer information]: :_default' \
'--dnssec=[Enable DNSSEC]: :(true false)' \
'--local-repo=[Enable local package repository]: :(true false)' \
'--source-cache=[Enable local source caches]: :(true false)' \
'--branch-exclusive-output=[Use different OUTPUT directory for branches]: :(true false)' \
'--volatile-mount=[Enable volatile mount]: :(true false)' \
'--use-apt=[Force to use APT]: :(true false)' \
'--add-repo=[Add an extra APT repository]:repo:_default' \
'--remove-repo=[Remove an extra APT repository]:repo:_default' \
'--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'--force-no-rollback[Do not rollback instances to apply configuration]' \
'--unset-repo[Remove all extra APT repository]' \
'--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(load-tree)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'::URL -- URL to the git repository:_default' \
&& ret=0
;;
(add)
_arguments "${_arguments_options[@]}" : \
'--local-repo=[Enable local package repository]: :(true false)' \
'--tmpfs=[Enable tmpfs]: :(true false)' \
'--tmpfs-size=[Size of tmpfs to use, in MiB]: :_default' \
'--ro-tree=[Mount TREE as read-only]: :(true false)' \
'--add-repo=[Add an extra APT repository]:repo:_default' \
'--remove-repo=[Remove an extra APT repository]:repo:_default' \
'--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'--unset-tmpfs-size[Reset tmpfs size to default]' \
'--unset-repo[Remove all extra APT repository]' \
'--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
':INSTANCE:_default' \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(mount)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(boot)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(down)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
'-a[]' \
'--all[]' \
'-h[Print help]' \
'--help[Print help]' \
'*::INSTANCE:_default' \
&& ret=0
;;
(commit)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':INSTANCE:_default' \
&& ret=0
;;
(shell)
_arguments "${_arguments_options[@]}" : \
'-i+[Instance to be used]: :_default' \
'(-i)--local-repo=[Enable local package repository]: :(true false)' \
'(-i)--tmpfs=[Enable tmpfs]: :(true false)' \
'(-i)--tmpfs-size=[Size of tmpfs to use, in MiB]: :_default' \
'(-i)--ro-tree=[Mount TREE as read-only]: :(true false)' \
'(-i)--add-repo=[Add an extra APT repository]:repo:_default' \
'(-i)--remove-repo=[Remove an extra APT repository]:repo:_default' \
'(-i)--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'(-i)--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'(-i)--unset-tmpfs-size[Reset tmpfs size to default]' \
'(-i)--unset-repo[Remove all extra APT repository]' \
'(-i)--unset-nspawn-opt[Remove all extra nspawn option]' \
'-h[Print help]' \
'--help[Print help]' \
'*::COMMANDS:_default' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
'-i+[Instance to run command in]: :_default' \
'-h[Print help]' \
'--help[Print help]' \
'*::COMMANDS:_default' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
'-i+[Instance to be used]: :_default' \
'(-i)--local-repo=[Enable local package repository]: :(true false)' \
'(-i)--tmpfs=[Enable tmpfs]: :(true false)' \
'(-i)--tmpfs-size=[Size of tmpfs to use, in MiB]: :_default' \
'(-i)--ro-tree=[Mount TREE as read-only]: :(true false)' \
'(-i)--add-repo=[Add an extra APT repository]:repo:_default' \
'(-i)--remove-repo=[Remove an extra APT repository]:repo:_default' \
'(-i)--add-nspawn-opt=[Add an extra nspawn option]:nspawn-opt:_default' \
'(-i)--remove-nspawn-opt=[Remove an extra nspawn option]:nspawn-opt:_default' \
'(-g --stage-select)-c+[Resume from a Ciel checkpoint]: :_default' \
'(-g --stage-select)--resume=[Resume from a Ciel checkpoint]: :_default' \
'(-i)--unset-tmpfs-size[Reset tmpfs size to default]' \
'(-i)--unset-repo[Remove all extra APT repository]' \
'(-i)--unset-nspawn-opt[Remove all extra nspawn option]' \
'-g[Fetch package sources only]' \
'--stage-select[Select the starting point for a build]' \
'(-i)--always-discard[Destory ephemeral containers if the build fails]' \
'-h[Print help]' \
'--help[Print help]' \
'*::PACKAGES:_default' \
&& ret=0
;;
(repo)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_ciel__repo_commands" \
"*::: :->repo" \
&& ret=0

    case $state in
    (repo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ciel-repo-command-$line[1]:"
        case $line[1] in
            (refresh)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_ciel__repo__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ciel-repo-help-command-$line[1]:"
        case $line[1] in
            (refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(clean)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(diagnose)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_ciel__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ciel-help-command-$line[1]:"
        case $line[1] in
            (version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(new)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(farewell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(load-os)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update-os)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(instconf)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(load-tree)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(add)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(mount)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(boot)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(down)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rollback)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(commit)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(shell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(repo)
_arguments "${_arguments_options[@]}" : \
":: :_ciel__help__repo_commands" \
"*::: :->repo" \
&& ret=0

    case $state in
    (repo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ciel-help-repo-command-$line[1]:"
        case $line[1] in
            (refresh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(clean)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(diagnose)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_ciel_commands] )) ||
_ciel_commands() {
    local commands; commands=(
'version:Display the version of CIEL!' \
'list:List all instances in the workspace' \
'new:Create a new CIEL! workspace' \
'farewell:Remove everything related to CIEL!' \
'load-os:Unpack OS tarball or fetch the latest BuildKit' \
'update-os:Update the OS in the container' \
'instconf:Configure instances' \
'config:Configure workspace' \
'load-tree:Clone abbs tree from git' \
'add:Add a new instance' \
'del:Remove one or all instance' \
'mount:Mount one or all instance' \
'boot:Start one or all instance' \
'stop:Shutdown one or all instance' \
'down:Shutdown and unmount one or all instance' \
'rollback:Rollback one or all instance' \
'commit:Commit changes onto the underlying base system' \
'shell:Start an interactive shell or run a shell command' \
'run:Run a command in the container' \
'build:Build the packages using the specified instance' \
'repo:Local repository maintenance' \
'clean:Clean all the output directories and source cache directories' \
'diagnose:Diagnose problems (hopefully)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ciel commands' commands "$@"
}
(( $+functions[_ciel__add_commands] )) ||
_ciel__add_commands() {
    local commands; commands=()
    _describe -t commands 'ciel add commands' commands "$@"
}
(( $+functions[_ciel__boot_commands] )) ||
_ciel__boot_commands() {
    local commands; commands=()
    _describe -t commands 'ciel boot commands' commands "$@"
}
(( $+functions[_ciel__build_commands] )) ||
_ciel__build_commands() {
    local commands; commands=()
    _describe -t commands 'ciel build commands' commands "$@"
}
(( $+functions[_ciel__clean_commands] )) ||
_ciel__clean_commands() {
    local commands; commands=()
    _describe -t commands 'ciel clean commands' commands "$@"
}
(( $+functions[_ciel__commit_commands] )) ||
_ciel__commit_commands() {
    local commands; commands=()
    _describe -t commands 'ciel commit commands' commands "$@"
}
(( $+functions[_ciel__config_commands] )) ||
_ciel__config_commands() {
    local commands; commands=()
    _describe -t commands 'ciel config commands' commands "$@"
}
(( $+functions[_ciel__del_commands] )) ||
_ciel__del_commands() {
    local commands; commands=()
    _describe -t commands 'ciel del commands' commands "$@"
}
(( $+functions[_ciel__diagnose_commands] )) ||
_ciel__diagnose_commands() {
    local commands; commands=()
    _describe -t commands 'ciel diagnose commands' commands "$@"
}
(( $+functions[_ciel__down_commands] )) ||
_ciel__down_commands() {
    local commands; commands=()
    _describe -t commands 'ciel down commands' commands "$@"
}
(( $+functions[_ciel__farewell_commands] )) ||
_ciel__farewell_commands() {
    local commands; commands=()
    _describe -t commands 'ciel farewell commands' commands "$@"
}
(( $+functions[_ciel__help_commands] )) ||
_ciel__help_commands() {
    local commands; commands=(
'version:Display the version of CIEL!' \
'list:List all instances in the workspace' \
'new:Create a new CIEL! workspace' \
'farewell:Remove everything related to CIEL!' \
'load-os:Unpack OS tarball or fetch the latest BuildKit' \
'update-os:Update the OS in the container' \
'instconf:Configure instances' \
'config:Configure workspace' \
'load-tree:Clone abbs tree from git' \
'add:Add a new instance' \
'del:Remove one or all instance' \
'mount:Mount one or all instance' \
'boot:Start one or all instance' \
'stop:Shutdown one or all instance' \
'down:Shutdown and unmount one or all instance' \
'rollback:Rollback one or all instance' \
'commit:Commit changes onto the underlying base system' \
'shell:Start an interactive shell or run a shell command' \
'run:Run a command in the container' \
'build:Build the packages using the specified instance' \
'repo:Local repository maintenance' \
'clean:Clean all the output directories and source cache directories' \
'diagnose:Diagnose problems (hopefully)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ciel help commands' commands "$@"
}
(( $+functions[_ciel__help__add_commands] )) ||
_ciel__help__add_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help add commands' commands "$@"
}
(( $+functions[_ciel__help__boot_commands] )) ||
_ciel__help__boot_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help boot commands' commands "$@"
}
(( $+functions[_ciel__help__build_commands] )) ||
_ciel__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help build commands' commands "$@"
}
(( $+functions[_ciel__help__clean_commands] )) ||
_ciel__help__clean_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help clean commands' commands "$@"
}
(( $+functions[_ciel__help__commit_commands] )) ||
_ciel__help__commit_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help commit commands' commands "$@"
}
(( $+functions[_ciel__help__config_commands] )) ||
_ciel__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help config commands' commands "$@"
}
(( $+functions[_ciel__help__del_commands] )) ||
_ciel__help__del_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help del commands' commands "$@"
}
(( $+functions[_ciel__help__diagnose_commands] )) ||
_ciel__help__diagnose_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help diagnose commands' commands "$@"
}
(( $+functions[_ciel__help__down_commands] )) ||
_ciel__help__down_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help down commands' commands "$@"
}
(( $+functions[_ciel__help__farewell_commands] )) ||
_ciel__help__farewell_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help farewell commands' commands "$@"
}
(( $+functions[_ciel__help__help_commands] )) ||
_ciel__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help help commands' commands "$@"
}
(( $+functions[_ciel__help__instconf_commands] )) ||
_ciel__help__instconf_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help instconf commands' commands "$@"
}
(( $+functions[_ciel__help__list_commands] )) ||
_ciel__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help list commands' commands "$@"
}
(( $+functions[_ciel__help__load-os_commands] )) ||
_ciel__help__load-os_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help load-os commands' commands "$@"
}
(( $+functions[_ciel__help__load-tree_commands] )) ||
_ciel__help__load-tree_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help load-tree commands' commands "$@"
}
(( $+functions[_ciel__help__mount_commands] )) ||
_ciel__help__mount_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help mount commands' commands "$@"
}
(( $+functions[_ciel__help__new_commands] )) ||
_ciel__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help new commands' commands "$@"
}
(( $+functions[_ciel__help__repo_commands] )) ||
_ciel__help__repo_commands() {
    local commands; commands=(
'refresh:Refresh the repository' \
    )
    _describe -t commands 'ciel help repo commands' commands "$@"
}
(( $+functions[_ciel__help__repo__refresh_commands] )) ||
_ciel__help__repo__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help repo refresh commands' commands "$@"
}
(( $+functions[_ciel__help__rollback_commands] )) ||
_ciel__help__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help rollback commands' commands "$@"
}
(( $+functions[_ciel__help__run_commands] )) ||
_ciel__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help run commands' commands "$@"
}
(( $+functions[_ciel__help__shell_commands] )) ||
_ciel__help__shell_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help shell commands' commands "$@"
}
(( $+functions[_ciel__help__stop_commands] )) ||
_ciel__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help stop commands' commands "$@"
}
(( $+functions[_ciel__help__update-os_commands] )) ||
_ciel__help__update-os_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help update-os commands' commands "$@"
}
(( $+functions[_ciel__help__version_commands] )) ||
_ciel__help__version_commands() {
    local commands; commands=()
    _describe -t commands 'ciel help version commands' commands "$@"
}
(( $+functions[_ciel__instconf_commands] )) ||
_ciel__instconf_commands() {
    local commands; commands=()
    _describe -t commands 'ciel instconf commands' commands "$@"
}
(( $+functions[_ciel__list_commands] )) ||
_ciel__list_commands() {
    local commands; commands=()
    _describe -t commands 'ciel list commands' commands "$@"
}
(( $+functions[_ciel__load-os_commands] )) ||
_ciel__load-os_commands() {
    local commands; commands=()
    _describe -t commands 'ciel load-os commands' commands "$@"
}
(( $+functions[_ciel__load-tree_commands] )) ||
_ciel__load-tree_commands() {
    local commands; commands=()
    _describe -t commands 'ciel load-tree commands' commands "$@"
}
(( $+functions[_ciel__mount_commands] )) ||
_ciel__mount_commands() {
    local commands; commands=()
    _describe -t commands 'ciel mount commands' commands "$@"
}
(( $+functions[_ciel__new_commands] )) ||
_ciel__new_commands() {
    local commands; commands=()
    _describe -t commands 'ciel new commands' commands "$@"
}
(( $+functions[_ciel__repo_commands] )) ||
_ciel__repo_commands() {
    local commands; commands=(
'refresh:Refresh the repository' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ciel repo commands' commands "$@"
}
(( $+functions[_ciel__repo__help_commands] )) ||
_ciel__repo__help_commands() {
    local commands; commands=(
'refresh:Refresh the repository' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ciel repo help commands' commands "$@"
}
(( $+functions[_ciel__repo__help__help_commands] )) ||
_ciel__repo__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ciel repo help help commands' commands "$@"
}
(( $+functions[_ciel__repo__help__refresh_commands] )) ||
_ciel__repo__help__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'ciel repo help refresh commands' commands "$@"
}
(( $+functions[_ciel__repo__refresh_commands] )) ||
_ciel__repo__refresh_commands() {
    local commands; commands=()
    _describe -t commands 'ciel repo refresh commands' commands "$@"
}
(( $+functions[_ciel__rollback_commands] )) ||
_ciel__rollback_commands() {
    local commands; commands=()
    _describe -t commands 'ciel rollback commands' commands "$@"
}
(( $+functions[_ciel__run_commands] )) ||
_ciel__run_commands() {
    local commands; commands=()
    _describe -t commands 'ciel run commands' commands "$@"
}
(( $+functions[_ciel__shell_commands] )) ||
_ciel__shell_commands() {
    local commands; commands=()
    _describe -t commands 'ciel shell commands' commands "$@"
}
(( $+functions[_ciel__stop_commands] )) ||
_ciel__stop_commands() {
    local commands; commands=()
    _describe -t commands 'ciel stop commands' commands "$@"
}
(( $+functions[_ciel__update-os_commands] )) ||
_ciel__update-os_commands() {
    local commands; commands=()
    _describe -t commands 'ciel update-os commands' commands "$@"
}
(( $+functions[_ciel__version_commands] )) ||
_ciel__version_commands() {
    local commands; commands=()
    _describe -t commands 'ciel version commands' commands "$@"
}

if [ "$funcstack[1]" = "_ciel" ]; then
    _ciel "$@"
else
    compdef _ciel ciel
fi
