// This code was autogenerated with `dbus-codegen-rust --file dbus-xml/org.freedesktop.machine1.xml -m None`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface: &str, property: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
    fn set(&self, interface: &str, property: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface: &str, property: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface, property, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn get_all(&self, interface: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface, ))
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }

    fn set(&self, interface: &str, property: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface, property, value, ))
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopMachine1Manager {
    fn get_machine(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_image(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_machine_by_pid(&self, arg0: u32) -> Result<dbus::Path<'static>, dbus::Error>;
    fn list_machines(&self) -> Result<Vec<(String, String, String, dbus::Path<'static>)>, dbus::Error>;
    fn list_images(&self) -> Result<Vec<(String, String, bool, u64, u64, u64, dbus::Path<'static>)>, dbus::Error>;
    fn create_machine(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<(&str, arg::Variant<Box<dyn arg::RefArg>>)>) -> Result<dbus::Path<'static>, dbus::Error>;
    fn create_machine_with_network(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<i32>, arg7: Vec<(&str, arg::Variant<Box<dyn arg::RefArg>>)>) -> Result<dbus::Path<'static>, dbus::Error>;
    fn register_machine(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str) -> Result<dbus::Path<'static>, dbus::Error>;
    fn register_machine_with_network(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<i32>) -> Result<dbus::Path<'static>, dbus::Error>;
    fn unregister_machine(&self, arg0: &str) -> Result<(), dbus::Error>;
    fn terminate_machine(&self, arg0: &str) -> Result<(), dbus::Error>;
    fn kill_machine(&self, arg0: &str, arg1: &str, arg2: i32) -> Result<(), dbus::Error>;
    fn get_machine_addresses(&self, arg0: &str) -> Result<Vec<(i32, Vec<u8>)>, dbus::Error>;
    fn get_machine_osrelease(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error>;
    fn open_machine_pty(&self, arg0: &str) -> Result<(arg::OwnedFd, String), dbus::Error>;
    fn open_machine_login(&self, arg0: &str) -> Result<(arg::OwnedFd, String), dbus::Error>;
    fn open_machine_shell(&self, arg0: &str, arg1: &str, arg2: &str, arg3: Vec<&str>, arg4: Vec<&str>) -> Result<(arg::OwnedFd, String), dbus::Error>;
    fn bind_mount_machine(&self, arg0: &str, arg1: &str, arg2: &str, arg3: bool, arg4: bool) -> Result<(), dbus::Error>;
    fn copy_from_machine(&self, arg0: &str, arg1: &str, arg2: &str) -> Result<(), dbus::Error>;
    fn copy_to_machine(&self, arg0: &str, arg1: &str, arg2: &str) -> Result<(), dbus::Error>;
    fn open_machine_root_directory(&self, arg0: &str) -> Result<arg::OwnedFd, dbus::Error>;
    fn get_machine_uidshift(&self, arg0: &str) -> Result<u32, dbus::Error>;
    fn remove_image(&self, arg0: &str) -> Result<(), dbus::Error>;
    fn rename_image(&self, arg0: &str, arg1: &str) -> Result<(), dbus::Error>;
    fn clone_image(&self, arg0: &str, arg1: &str, arg2: bool) -> Result<(), dbus::Error>;
    fn mark_image_read_only(&self, arg0: &str, arg1: bool) -> Result<(), dbus::Error>;
    fn get_image_hostname(&self, arg0: &str) -> Result<String, dbus::Error>;
    fn get_image_machine_id(&self, arg0: &str) -> Result<Vec<u8>, dbus::Error>;
    fn get_image_machine_info(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error>;
    fn get_image_osrelease(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error>;
    fn set_pool_limit_(&self, arg0: u64) -> Result<(), dbus::Error>;
    fn set_image_limit(&self, arg0: &str, arg1: u64) -> Result<(), dbus::Error>;
    fn clean_pool(&self, arg0: &str) -> Result<Vec<(String, u64)>, dbus::Error>;
    fn map_from_machine_user(&self, arg0: &str, arg1: u32) -> Result<u32, dbus::Error>;
    fn map_to_machine_user(&self, arg0: u32) -> Result<(String, dbus::Path<'static>, u32), dbus::Error>;
    fn map_from_machine_group(&self, arg0: &str, arg1: u32) -> Result<u32, dbus::Error>;
    fn map_to_machine_group(&self, arg0: u32) -> Result<(String, dbus::Path<'static>, u32), dbus::Error>;
    fn pool_path(&self) -> Result<String, dbus::Error>;
    fn pool_usage(&self) -> Result<u64, dbus::Error>;
    fn pool_limit(&self) -> Result<u64, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopMachine1Manager for blocking::Proxy<'a, C> {

    fn get_machine(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetMachine", (arg0, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn get_image(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetImage", (arg0, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn get_machine_by_pid(&self, arg0: u32) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetMachineByPID", (arg0, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn list_machines(&self) -> Result<Vec<(String, String, String, dbus::Path<'static>)>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "ListMachines", ())
            .and_then(|r: (Vec<(String, String, String, dbus::Path<'static>)>, )| Ok(r.0, ))
    }

    fn list_images(&self) -> Result<Vec<(String, String, bool, u64, u64, u64, dbus::Path<'static>)>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "ListImages", ())
            .and_then(|r: (Vec<(String, String, bool, u64, u64, u64, dbus::Path<'static>)>, )| Ok(r.0, ))
    }

    fn create_machine(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<(&str, arg::Variant<Box<dyn arg::RefArg>>)>) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CreateMachine", (arg0, arg1, arg2, arg3, arg4, arg5, arg6, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn create_machine_with_network(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<i32>, arg7: Vec<(&str, arg::Variant<Box<dyn arg::RefArg>>)>) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CreateMachineWithNetwork", (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn register_machine(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "RegisterMachine", (arg0, arg1, arg2, arg3, arg4, arg5, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn register_machine_with_network(&self, arg0: &str, arg1: Vec<u8>, arg2: &str, arg3: &str, arg4: u32, arg5: &str, arg6: Vec<i32>) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "RegisterMachineWithNetwork", (arg0, arg1, arg2, arg3, arg4, arg5, arg6, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn unregister_machine(&self, arg0: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "UnregisterMachine", (arg0, ))
    }

    fn terminate_machine(&self, arg0: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "TerminateMachine", (arg0, ))
    }

    fn kill_machine(&self, arg0: &str, arg1: &str, arg2: i32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "KillMachine", (arg0, arg1, arg2, ))
    }

    fn get_machine_addresses(&self, arg0: &str) -> Result<Vec<(i32, Vec<u8>)>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetMachineAddresses", (arg0, ))
            .and_then(|r: (Vec<(i32, Vec<u8>)>, )| Ok(r.0, ))
    }

    fn get_machine_osrelease(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetMachineOSRelease", (arg0, ))
            .and_then(|r: (::std::collections::HashMap<String, String>, )| Ok(r.0, ))
    }

    fn open_machine_pty(&self, arg0: &str) -> Result<(arg::OwnedFd, String), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "OpenMachinePTY", (arg0, ))
    }

    fn open_machine_login(&self, arg0: &str) -> Result<(arg::OwnedFd, String), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "OpenMachineLogin", (arg0, ))
    }

    fn open_machine_shell(&self, arg0: &str, arg1: &str, arg2: &str, arg3: Vec<&str>, arg4: Vec<&str>) -> Result<(arg::OwnedFd, String), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "OpenMachineShell", (arg0, arg1, arg2, arg3, arg4, ))
    }

    fn bind_mount_machine(&self, arg0: &str, arg1: &str, arg2: &str, arg3: bool, arg4: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "BindMountMachine", (arg0, arg1, arg2, arg3, arg4, ))
    }

    fn copy_from_machine(&self, arg0: &str, arg1: &str, arg2: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CopyFromMachine", (arg0, arg1, arg2, ))
    }

    fn copy_to_machine(&self, arg0: &str, arg1: &str, arg2: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CopyToMachine", (arg0, arg1, arg2, ))
    }

    fn open_machine_root_directory(&self, arg0: &str) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "OpenMachineRootDirectory", (arg0, ))
            .and_then(|r: (arg::OwnedFd, )| Ok(r.0, ))
    }

    fn get_machine_uidshift(&self, arg0: &str) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetMachineUIDShift", (arg0, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn remove_image(&self, arg0: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "RemoveImage", (arg0, ))
    }

    fn rename_image(&self, arg0: &str, arg1: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "RenameImage", (arg0, arg1, ))
    }

    fn clone_image(&self, arg0: &str, arg1: &str, arg2: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CloneImage", (arg0, arg1, arg2, ))
    }

    fn mark_image_read_only(&self, arg0: &str, arg1: bool) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "MarkImageReadOnly", (arg0, arg1, ))
    }

    fn get_image_hostname(&self, arg0: &str) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetImageHostname", (arg0, ))
            .and_then(|r: (String, )| Ok(r.0, ))
    }

    fn get_image_machine_id(&self, arg0: &str) -> Result<Vec<u8>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetImageMachineID", (arg0, ))
            .and_then(|r: (Vec<u8>, )| Ok(r.0, ))
    }

    fn get_image_machine_info(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetImageMachineInfo", (arg0, ))
            .and_then(|r: (::std::collections::HashMap<String, String>, )| Ok(r.0, ))
    }

    fn get_image_osrelease(&self, arg0: &str) -> Result<::std::collections::HashMap<String, String>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "GetImageOSRelease", (arg0, ))
            .and_then(|r: (::std::collections::HashMap<String, String>, )| Ok(r.0, ))
    }

    fn set_pool_limit_(&self, arg0: u64) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "SetPoolLimit", (arg0, ))
    }

    fn set_image_limit(&self, arg0: &str, arg1: u64) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "SetImageLimit", (arg0, arg1, ))
    }

    fn clean_pool(&self, arg0: &str) -> Result<Vec<(String, u64)>, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "CleanPool", (arg0, ))
            .and_then(|r: (Vec<(String, u64)>, )| Ok(r.0, ))
    }

    fn map_from_machine_user(&self, arg0: &str, arg1: u32) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "MapFromMachineUser", (arg0, arg1, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn map_to_machine_user(&self, arg0: u32) -> Result<(String, dbus::Path<'static>, u32), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "MapToMachineUser", (arg0, ))
    }

    fn map_from_machine_group(&self, arg0: &str, arg1: u32) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "MapFromMachineGroup", (arg0, arg1, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn map_to_machine_group(&self, arg0: u32) -> Result<(String, dbus::Path<'static>, u32), dbus::Error> {
        self.method_call("org.freedesktop.machine1.Manager", "MapToMachineGroup", (arg0, ))
    }

    fn pool_path(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.machine1.Manager", "PoolPath")
    }

    fn pool_usage(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.machine1.Manager", "PoolUsage")
    }

    fn pool_limit(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.machine1.Manager", "PoolLimit")
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopMachine1ManagerMachineNew {
    pub arg0: String,
    pub arg1: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopMachine1ManagerMachineNew {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
    }
}

impl arg::ReadAll for OrgFreedesktopMachine1ManagerMachineNew {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopMachine1ManagerMachineNew {
            arg0: i.read()?,
            arg1: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopMachine1ManagerMachineNew {
    const NAME: &'static str = "MachineNew";
    const INTERFACE: &'static str = "org.freedesktop.machine1.Manager";
}

#[derive(Debug)]
pub struct OrgFreedesktopMachine1ManagerMachineRemoved {
    pub arg0: String,
    pub arg1: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopMachine1ManagerMachineRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
        arg::RefArg::append(&self.arg1, i);
    }
}

impl arg::ReadAll for OrgFreedesktopMachine1ManagerMachineRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopMachine1ManagerMachineRemoved {
            arg0: i.read()?,
            arg1: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopMachine1ManagerMachineRemoved {
    const NAME: &'static str = "MachineRemoved";
    const INTERFACE: &'static str = "org.freedesktop.machine1.Manager";
}
